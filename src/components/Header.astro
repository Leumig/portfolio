---
// Component
import ThemeToggle from "./ThemeToggle.astro";

// Icon
import HamburgerIcon from "../icons/Hamburger.astro";
import CloseIcon from "../icons/Close.astro";

// Navbar items
const navItems = [
  {
    title: "Inicio",
    label: "inicio",
    href: "#inicio",
  },
  {
    title: "Habilidades",
    label: "habilidades",
    href: "#habilidades",
  },
  {
    title: "Proyectos",
    label: "proyectos",
    href: "#proyectos",
  },
  {
    title: "Sobre mí",
    label: "sobre-mi",
    href: "#sobre-mi",
  },
  {
    title: "Contacto",
    label: "contacto",
    href: "#contacto",
  },
];
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
  <!-- Hamburger Menu -->
  <nav class="md:hidden w-full mr-5">
    <div class="relative flex justify-end">
      <div
        id="hamburger-icon"
        class="cursor-pointer
        bg-white dark:bg-navbar-dark-bg
          border rounded-lg border-gray-300 dark:border-gray-700
          shadow-[0_3px_10px_rgb(0,0,0,0.2)]
          p-2
        text-slate-800 dark:text-slate-300
        hover:text-navbar-primary dark:hover:text-navbar-secondary
        active:bg-slate-100 dark:active:bg-slate-700
          transition"
      >
        <HamburgerIcon class="size-8" />
      </div>
    </div>
    <div
      id="menu-links"
      class="hidden flex-col items-center
        border rounded-md
        absolute top-0 right-0 mr-5
      bg-white/90 dark:bg-navbar-dark-bg
      border-gray-100 dark:border-gray-500/20
        shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
    >
      <div
        id="close-icon"
        class="cursor-pointer
          p-2 mb-2 self-end
        text-slate-800 dark:text-slate-400
        hover:text-slate-500 dark:hover:text-slate-300
          transition"
      >
        <CloseIcon class="size-8" />
      </div>
      {
        navItems.map((link) => (
          <a
            class="px-8 py-2 
              rounded-lg
              flex justify-start text-start
            hover:text-navbar-primary dark:hover:text-navbar-secondary
              font-bold"
            aria-label={link.label}
            href={link.href}
          >
            {link.title}
          </a>
        ))
      }
      <!-- <ThemeToggle /> (Can be moved to this place) -->
    </div>
  </nav>

  <!-- Desktop Navbar -->
  <nav
    id="desktop-navbar"
    class="hidden md:flex justify-center items-center min-w-fit
      px-12 gap-4 mt-2 rounded-2xl
      font-bold
    text-gray-600 dark:text-gray-200"
  >
    {
      navItems.map((link) => (
        <a
          class="relative block px-2 py-2 transition
          hover:text-navbar-primary dark:hover:text-navbar-secondary"
          aria-label={link.label}
          href={link.href}
        >
          {link.title}
        </a>
      ))
    }
    <ThemeToggle />
  </nav>
</header>

<style>
  /* Navbar animation */

  #desktop-navbar {
    @apply bg-white/90 dark:bg-navbar-dark-bg;

    animation: nav-shadown 2s linear both;
    animation-timeline: scroll(root block);
    animation-range: 0 100px;
  }

  @keyframes nav-shadown {
    0% {
      @apply bg-transparent;
    }
    100% {
      @apply shadow-lg backdrop-blur;
    }
  }

  /* Hamburger Menu Links Animation */

  #menu-links {
    animation: scale-up-center .1s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.99);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>

<!-- Navbar items color change, hamburger menu functions and toggle theme container position -->
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll<HTMLElement>("section");
    const navItems =
      document.querySelectorAll<HTMLAnchorElement>("header nav a");

    // Function to change the color of the navbar items
    const changeColor = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add(
                "text-navbar-primary",
                "dark:text-navbar-secondary"
              );
            } else {
              item.classList.remove(
                "text-navbar-primary",
                "dark:text-navbar-secondary"
              );
            }
          });
        }
      });
    };

    // Threshold values
    let thresholdValue = 0.7;
    let thresholdContactValue = 1;

    // Create an observer for general sections
    let generalObserver = new IntersectionObserver(changeColor, {
      root: null,
      rootMargin: "0px",
      threshold: thresholdValue, // x% Visibility required
    });

    // Create a specific observer for the "Contacto" section
    let contactoObserver = new IntersectionObserver(changeColor, {
      root: null,
      rootMargin: "0px",
      threshold: thresholdContactValue, // x% Visibility required
    });

    // Update threshold values ​​depending on resolution
    function updateThresholdValues() {
      thresholdValue = 0.7;
      thresholdContactValue = 1;

      if (window.innerHeight < 820) thresholdValue = 0.4;
      
      if (window.innerWidth < 769) thresholdValue = 0.4;
      
      if (window.innerWidth < 400) thresholdValue = 0.2;
      
      if (window.innerHeight < 500) {
        thresholdValue = 0.01;
        thresholdContactValue = 0.4;
      }

      updateObservers();
    }

    // Update general and contact observers with new threshold values
    function updateObservers() {
      // Disconnect existing observers if they exist
      if (generalObserver)generalObserver.disconnect();
      if (contactoObserver) contactoObserver.disconnect();

      // Create new observers with updated threshold values 
      generalObserver = new IntersectionObserver(changeColor, {
        root: null,
        rootMargin: "0px",
        threshold: thresholdValue,
      });
      contactoObserver = new IntersectionObserver(changeColor, {
        root: null,
        rootMargin: "0px",
        threshold: thresholdContactValue,
      });

      // Attach the appropriate observer to each section
      sections.forEach((section) => {
        if (section.id === "contacto") {
          contactoObserver.observe(section);
        } else {
          generalObserver.observe(section);
        }
      });
    }

    // Initialize threshold values and observers
    updateThresholdValues();

    // Listen to the resize event to update the threshold values dynamically
    window.addEventListener("resize", updateThresholdValues);

    // Optimization function (stop observing when the tab is not visible)
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        generalObserver.disconnect();
        contactoObserver.disconnect();
      } else {
        updateThresholdValues();
      }
    };

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    // Open or close the Hamburger Menu (Mobile Navbar)
    const hamburgerIcon = document.getElementById("hamburger-icon");
    const closeIcon = document.getElementById("close-icon");
    const menuLinks = document.getElementById("menu-links");

    const showMenu = () => {
      hamburgerIcon?.classList.add("hidden");
      menuLinks?.classList.remove("hidden");
      menuLinks?.classList.add("flex");
    };

    const hideMenu = () => {
      hamburgerIcon?.classList.remove("hidden");
      menuLinks?.classList.add("hidden");
    };

    // Show the hamburger menu when clicked the icon
    hamburgerIcon?.addEventListener("click", (e) => {
      e.stopPropagation();
      showMenu();
    });

    // Close the hamburger menu when clicked the close icon
    closeIcon?.addEventListener("click", hideMenu);

    // Close the hamburger menu when clicked outside
    document.addEventListener("click", (e) => {
      if (e.target !== menuLinks) {
        hideMenu();
      }
    });

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    // Change the Theme Toggle Component position in the page
    const themeToggleComponent: any = document.getElementById(
      "theme-toggle-component"
    );

    const desktopMenu = document.getElementById("desktop-navbar");

    // Function to move ThemeToggle based on screen width
    const moveThemeToggle = () => {
      if (window.innerWidth >= 768) {
        // Move to desktop navbar
        if (!desktopMenu?.contains(themeToggleComponent)) {
          desktopMenu?.appendChild(themeToggleComponent);
        }
      } else {
        // Move to mobile menu
        if (!menuLinks?.contains(themeToggleComponent)) {
          menuLinks?.appendChild(themeToggleComponent);
        }
      }
    };

    // Initial placement
    moveThemeToggle();

    // Adjust on window resize
    window.addEventListener("resize", moveThemeToggle);
  });
</script>
